1. Project Setup (pom.xml)
xml
Copy
Edit
<project xmlns="http://maven.apache.org/POM/4.0.0">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.janitri</groupId>
  <artifactId>LoginAutomation</artifactId>
  <version>1.0-SNAPSHOT</version>
  <dependencies>
    <!-- Selenium -->
    <dependency>
      <groupId>org.seleniumhq.selenium</groupId>
      <artifactId>selenium-java</artifactId>
      <version>4.21.0</version>
    </dependency>

    <!-- TestNG -->
    <dependency>
      <groupId>org.testng</groupId>
      <artifactId>testng</artifactId>
      <version>7.10.2</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
</project>
✅ 2. BaseTest Class
java
Copy
Edit
package base;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.testng.annotations.*;

import java.time.Duration;

public class BaseTest {
    protected WebDriver driver;

    @BeforeMethod
    public void setUp() {
        ChromeOptions options = new ChromeOptions();
        options.addArguments("--disable-notifications"); // handle permissions

        driver = new ChromeDriver(options);
        driver.manage().window().maximize();
        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
        driver.get("https://dev-dash.janitri.in/");
    }

    @AfterMethod
    public void tearDown() {
        if (driver != null)
            driver.quit();
    }
}
✅ 3. LoginPage (Page Object)
java
Copy
Edit
package pages;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;

public class LoginPage {
    WebDriver driver;

    public LoginPage(WebDriver driver) {
        this.driver = driver;
    }

    // Locators
    private By userIdInput = By.id("mui-1");
    private By passwordInput = By.id("mui-2");
    private By loginButton = By.xpath("//button[@type='submit']");
    private By passwordToggle = By.xpath("//button[@aria-label='toggle password visibility']");
    private By errorMsg = By.xpath("//p[contains(@class,'Mui-error')]");

    // Actions
    public void enterUserId(String userId) {
        driver.findElement(userIdInput).sendKeys(userId);
    }

    public void enterPassword(String password) {
        driver.findElement(passwordInput).sendKeys(password);
    }

    public void clickLogin() {
        driver.findElement(loginButton).click();
    }

    public boolean isLoginButtonEnabled() {
        return driver.findElement(loginButton).isEnabled();
    }

    public void clickPasswordToggle() {
        driver.findElement(passwordToggle).click();
    }

    public String getPasswordFieldType() {
        return driver.findElement(passwordInput).getAttribute("type"); // "password" or "text"
    }

    public String getErrorMessage() {
        return driver.findElement(errorMsg).getText();
    }

    public boolean isUserIdFieldDisplayed() {
        return driver.findElement(userIdInput).isDisplayed();
    }

    public boolean isPasswordFieldDisplayed() {
        return driver.findElement(passwordInput).isDisplayed();
    }

    public boolean isLoginButtonDisplayed() {
        return driver.findElement(loginButton).isDisplayed();
    }
}
✅ 4. Test Class (LoginPageTest.java)
java
Copy
Edit
package tests;

import base.BaseTest;
import org.testng.Assert;
import org.testng.annotations.Test;
import pages.LoginPage;

public class LoginPageTest extends BaseTest {

    @Test
    public void testLoginButtonDisabledWhenFieldsAreEmpty() {
        LoginPage login = new LoginPage(driver);
        Assert.assertFalse(login.isLoginButtonEnabled(), "Login button should be disabled");
    }

    @Test
    public void testInvalidLoginShowErrorMessage() {
        LoginPage login = new LoginPage(driver);
        login.enterUserId("invalid_user");
        login.enterPassword("wrong_pass");
        login.clickLogin();

        String error = login.getErrorMessage();
        System.out.println("Error message: " + error);

        Assert.assertTrue(error.toLowerCase().contains("invalid") || !error.isEmpty(),
                "Error message should be shown on invalid login");
    }

    @Test
    public void testPasswordMaskedButton() {
        LoginPage login = new LoginPage(driver);

        login.enterPassword("testpass");
        Assert.assertEquals(login.getPasswordFieldType(), "password", "Password should be masked");

        login.clickPasswordToggle();
        Assert.assertEquals(login.getPasswordFieldType(), "text", "Password should be visible after toggle");

        login.clickPasswordToggle();
        Assert.assertEquals(login.getPasswordFieldType(), "password", "Password should be masked again");
    }

    @Test
    public void testLoginPageUIElementsPresence() {
        LoginPage login = new LoginPage(driver);
        Assert.assertTrue(login.isUserIdFieldDisplayed(), "User ID field not displayed");
        Assert.assertTrue(login.isPasswordFieldDisplayed(), "Password field not displayed");
        Assert.assertTrue(login.isLoginButtonDisplayed(), "Login button not displayed");
    }
}
✅ 5. testng.xml
xml
Copy
Edit
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd" >
<suite name="Janitri Login Suite">
  <test name="Login Page Tests">
    <classes>
      <class name="tests.LoginPageTest"/>
    </classes>
  </test>
</suite>
